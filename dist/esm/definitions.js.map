{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type {\n  CapabilityOption,\n  PlayStoreOptions,\n  WatchConnectedOptions,\n  WatchSendOptions,\n} from './options';\nimport type { WatchLinkResult } from './result';\n\nexport interface WatchLinkPlugin {\n  /**\n   * [WatchOs ONLY]\n   *\n   * Will activate and resolve when the WCSession has been activated\n   */\n  activate(): Promise<WatchLinkResult>;\n\n  /**\n   * Returns if there's a watch paired to this device\n   *\n   * @param options connected options\n   */\n  paired(options?: WatchConnectedOptions): Promise<WatchLinkResult>;\n\n  /**\n   * [WatchOS ONLY]\n   * Returns if the watch is reachable to this device\n   */\n  reachable(): Promise<WatchLinkResult>;\n\n  /**\n   * Sends a message to a connected watch from this device\n   *\n   * [WearOS] => Sent via MessageClient\n   * [WatchOS] => Sent via WCSession\n   *\n   * @param options configure data to send\n   */\n  send(options: WatchSendOptions): Promise<WatchLinkResult>;\n\n  /**\n   * Listens to messages sent from any connected watch to this device\n   *\n   * [WearOS] => Listening via MessageClient\n   * [WatchOS] => Listening via WCSession\n   *\n   * @param callback Callback executed on a received message\n   */\n  listen(\n    callback: (result: { [key: string]: string }) => any,\n  ): Promise<WatchLinkResult>;\n\n  /**\n   * Stops listening to messages from any connected watch\n   */\n  unlisten(): Promise<void>;\n\n  /**\n   * [WearOs ONLY]\n   * Opens the playstore on all watches that do not have the app installed\n   */\n  openPlayStoreOnWatchesWithoutApp(\n    options: PlayStoreOptions,\n  ): Promise<WatchLinkResult>;\n\n  /**\n   * Returns whether ANY connected watch has the app installed\n   */\n  hasCompanionAppInstalled(\n    options: CapabilityOption,\n  ): Promise<{ result: boolean }>;\n}\n"]}