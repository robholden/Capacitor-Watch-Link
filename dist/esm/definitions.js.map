{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type {\r\n  CapabilityOption,\r\n  PlayStoreOptions,\r\n  WatchConnectedOptions,\r\n  WatchSendOptions,\r\n} from './options';\r\nimport type { WatchLinkResult } from './result';\r\n\r\nexport interface WatchLinkPlugin {\r\n  /**\r\n   * [WatchOs ONLY]\r\n   *\r\n   * Will activate and resolve when the WCSession has been activated\r\n   */\r\n  activate(): Promise<WatchLinkResult>;\r\n\r\n  /**\r\n   * Returns if there's a watch paired to this device\r\n   *\r\n   * @param options connected options\r\n   */\r\n  paired(options?: WatchConnectedOptions): Promise<WatchLinkResult>;\r\n\r\n  /**\r\n   * Sends a message to a connected watch from this device\r\n   *\r\n   * [WearOS] => Sent via MessageClient\r\n   * [WatchOS] => Sent via WCSession\r\n   *\r\n   * @param options configure data to send\r\n   */\r\n  send(options: WatchSendOptions): Promise<WatchLinkResult>;\r\n\r\n  /**\r\n   * Listens to messages sent from any connected watch to this device\r\n   *\r\n   * [WearOS] => Listening via MessageClient\r\n   * [WatchOS] => Listening via WCSession\r\n   *\r\n   * @param callback Callback executed on a received message\r\n   */\r\n  listen(\r\n    callback: (result: { [key: string]: string }) => any,\r\n  ): Promise<WatchLinkResult>;\r\n\r\n  /**\r\n   * Stops listening to messages from any connected watch\r\n   */\r\n  unlisten(): Promise<void>;\r\n\r\n  /**\r\n   * [WearOs ONLY]\r\n   * Opens the playstore on all watches that do not have the app installed\r\n   */\r\n  openPlayStoreOnWatchesWithoutApp(\r\n    options: PlayStoreOptions,\r\n  ): Promise<WatchLinkResult>;\r\n\r\n  /**\r\n   * Returns whether ANY connected watch has the app installed\r\n   */\r\n  hasCompanionAppInstalled(\r\n    options: CapabilityOption,\r\n  ): Promise<{ result: boolean }>;\r\n}\r\n"]}